#!/usr/bin/lua

--[[
    Subscribe to mqtt server and listen for events relating to attached lamp.

    To generate a broker configuration file in /tmp/ run the following periodically:
      # avahi-browse -rtp _mqtt._tcp | grep ^= | sed "s/^=/broker: /g" | cut -d";" -f0,8,9 | sed "s/: ;/: /g" > /tmp/pubsub.conf
]]--

package.path = package.path .. ';/usr/share/homeautomation/?.lua'

require 'os'
config = require 'homeautomation_config'
gpio = require 'homeautomation_gpio'

-- Load lua-mosquitto module if posible.
local found = false
for _, searcher in ipairs(package.searchers or package.loaders) do
  local loader = searcher('mosquitto')
  if type(loader) == 'function' then
    print('Using lua-mosquitto')
    found = true
    package.preload['mosquitto'] = loader
    mqtt = require "mosquitto"
    break
  end
end

-- Otherwise use our bash wrapper.
if found == false then
  print('Using homeautomation_mqtt')
  mqtt = require 'homeautomation_mqtt'
end


config_filename = "/etc/pubsub.conf"
tmp_config_filename = "/tmp/pubsub.conf"  -- Auto generated by avahi.

if #arg == 1 then 
  config_filename = arg[1] 
end

if #arg <= 1 then
  --if readConfig(config_filename) == false then
  if config.read(config_filename) == false then
    print("Could not find " .. config_filename)
    os.exit() 
  end
elseif #arg == 3 then
  local broker, port = string.match(value, "^%s?([%w%.:]*)%s?[,;]-%s?(%d*)%s?$")
  if broker == "" or broker == nil then                                                
    broker = default_broker                                                            
  end                                                                                  
  if port == "" or port == nil then                                                             
    port = default_port                                                                
  end
  config.configuration['brokers'][broker .. ',' .. port] = {broker=broker, port=port}

  target_room = arg[2]
  target_id = arg[3]
else                                
  usage()
end


mqtt_client = mqtt.new()

mqtt_client.ON_CONNECT = function()
  --print("mqtt_client.ON_CONNECT")
  mqtt_client:subscribe("homeautomation/lighting/all/all/#")
  for target_id, target_data in pairs(config.configuration) do
    if (target_id ~= 'avahi' and target_id ~= 'brokers') then
      mqtt_client:subscribe("homeautomation/lighting/" .. target_data["room"] .. "/" .. target_id .. "/#")
      mqtt_client:subscribe("homeautomation/lighting/" .. target_data["room"] .. "/all/#")
      mqtt_client:subscribe("homeautomation/lighting/all/" .. target_id .. "/#")

      mqtt_client:publish("homeautomation/lighting/advertise", target_data["room"] .. "/" .. target_id)
    end
  end
end

mqtt_client.ON_MESSAGE = function(mid, topic, payload)
  print(mid, topic, payload)

  local room = string.match(topic, "^[%w_%-]+/[%w_%-]+/([%w_%-]+)")
  local id = string.match(topic, "^[%w_%-]+/[%w_%-]+/[%w_%-]+/([%w_%-]+)")
  local command = string.match(topic, "^[%w_%-]+/[%w_%-]+/[%w_%-]+/[%w_%-]+/([%w_%-]+)")

  local target_id
  local target_data
  for target_id, target_data in pairs(config.configuration) do
    if target_id == 'avahi' or target_id == 'brokers' then
      -- Reserved keywords. Don't do anything for these here.
    elseif command == 'set' then
      -- Set lights on/off/etc.
      gpio.set(target_data.type, target_data.io, payload)
    elseif command == 'solicit' then
      -- Someone out there wants to know about connected nodes.
      local value  -- TODO Read current setting from gpio.
      print("I am ", target_data["room"], target_id, value)
      mqtt_client:publish("homeautomation/lighting/advertise", target_data["room"] .. "/" .. target_id)
    end

  end
end

mqtt_client.ON_PUBLISH = function()
  --print("mqtt_client.ON_PUBLISH")
end

run = true
while run do
  if config.configuration['avahi'] then
    -- use avahi to find all advertised mosquitto servers.
    local avahi_command = 'avahi-browse -rtp _mqtt._tcp | grep ^= | sed "s/^=/broker: /g" | cut -d";" -f0,8,9 | sed "s/: ;/: /g" > /tmp/pubsub.conf'
    os.execute(avahi_command)
    if config.read(tmp_config_filename) == false then
      print("Could not find " .. tmp_config_filename)
      os.exit()
    end
  end

  for key, value in pairs(config.configuration.brokers) do
    -- Work through each posible broker in config.
    local broker = value.broker
    local port = value.port
    if(mqtt_client:connect(broker, port) == 0) then
      print("Problem connecting to ", broker, port)
    else
      -- Broker looks good...
      print("Connected to ", broker, port)

      -- So try to actually use it.
      repeat
        return_value = mqtt_client:loop()
      until return_value ~= true
      -- Problem using connected broker so try the next in the config.
    end
  end

end
